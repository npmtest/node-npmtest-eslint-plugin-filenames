{"/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/test.js":"/* istanbul instrument in package npmtest_eslint_plugin_filenames */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/lib.npmtest_eslint_plugin_filenames.js":"/* istanbul instrument in package npmtest_eslint_plugin_filenames */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_eslint_plugin_filenames = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_eslint_plugin_filenames = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-eslint-plugin-filenames && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_eslint_plugin_filenames */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_eslint_plugin_filenames\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_eslint_plugin_filenames.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_eslint_plugin_filenames.rollup.js'] =\n            local.assetsDict['/assets.npmtest_eslint_plugin_filenames.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_eslint_plugin_filenames.__dirname + '/lib.npmtest_eslint_plugin_filenames.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/index.js":"\"use strict\";\n\nmodule.exports = {\n    rules: {\n        \"match-regex\": require(\"./lib/rules/match-regex\"),\n        \"match-exported\": require(\"./lib/rules/match-exported\"),\n        \"no-index\": require(\"./lib/rules/no-index\")\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/rules/match-regex.js":"/**\n * @fileoverview Rule to ensure that filenames match a convention (default: camelCase)\n * @author Stefan Lau\n */\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\n\"use strict\";\n\nvar path = require(\"path\"),\n    parseFilename = require('../common/parseFilename'),\n    getExportedName = require('../common/getExportedName'),\n    isIgnoredFilename = require('../common/isIgnoredFilename');\n\nmodule.exports = function(context) {\n    var defaultRegexp = /^([a-z0-9]+)([A-Z][a-z0-9]+)*$/g,\n        conventionRegexp = context.options[0] ? new RegExp(context.options[0]) : defaultRegexp,\n        ignoreExporting = context.options[1] ? context.options[1] : false;\n\n    return {\n        \"Program\": function(node) {\n            var filename = context.getFilename(),\n                absoluteFilename = path.resolve(filename),\n                parsed = parseFilename(absoluteFilename),\n                shouldIgnore = isIgnoredFilename(filename),\n                isExporting = Boolean(getExportedName(node)),\n                matchesRegex = conventionRegexp.test(parsed.name);\n\n            if (shouldIgnore) return;\n            if (ignoreExporting && isExporting) return;\n            if (!matchesRegex) {\n                context.report(node, \"Filename '{{name}}' does not match the naming convention.\", {\n                    name: parsed.base\n                });\n            }\n        }\n    };\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/common/parseFilename.js":"var path = require('path');\n\nmodule.exports = function parseFilename(filename) {\n    var ext = path.extname(filename);\n\n    return {\n        dir: path.dirname(filename),\n        base: path.basename(filename),\n        ext: ext,\n        name: path.basename(filename, ext)\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/common/getExportedName.js":"function getNodeName(node) {\n    if (node.type === \"Identifier\") {\n        return node.name;\n    }\n\n    if (node.id && node.id.type === \"Identifier\") {\n        return node.id.name;\n    }\n}\n\nmodule.exports = function getExportedName(programNode) {\n    for (var i = 0; i < programNode.body.length; i += 1) {\n        var node = programNode.body[i];\n\n        // export default ...\n        if (node.type === \"ExportDefaultDeclaration\") {\n            return getNodeName(node.declaration);\n        }\n\n        // module.exports = ...\n        if (node.type === \"ExpressionStatement\" &&\n            node.expression.type === \"AssignmentExpression\" &&\n            node.expression.left.type === \"MemberExpression\" &&\n            node.expression.left.object.type === \"Identifier\" &&\n            node.expression.left.object.name === \"module\" &&\n            node.expression.left.property.type === \"Identifier\" &&\n            node.expression.left.property.name === \"exports\"\n        ) {\n            return getNodeName(node.expression.right);\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/common/isIgnoredFilename.js":"var ignoredFilenames = [ \"<text>\", \"<input>\" ];\n\nmodule.exports = function isIgnoredFilename(filename) {\n    return ignoredFilenames.indexOf(filename) !== -1;\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/rules/match-exported.js":"/**\n * @fileoverview Rule to ensure that filenames match the exports of the file\n * @author Stefan Lau\n */\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar path = require('path'),\n    camelCase = require('lodash.camelcase'),\n    upperFirst = require('lodash.upperfirst'),\n    parseFilename = require('../common/parseFilename'),\n    isIgnoredFilename = require('../common/isIgnoredFilename'),\n    getExportedName = require('../common/getExportedName'),\n    isIndexFile = require('../common/isIndexFile'),\n    transforms = {\n        kebab: require('lodash.kebabcase'),\n        snake: require('lodash.snakecase'),\n        camel: camelCase,\n        pascal: function (name) {\n            return upperFirst(camelCase(name));\n        }\n    },\n    transformNames = Object.keys(transforms),\n    transformSchema = { \"enum\": transformNames.concat([ null ]) };\n\nfunction getStringToCheckAgainstExport(parsed, replacePattern) {\n    var dirArray = parsed.dir.split(path.sep);\n    var lastDirectory = dirArray[dirArray.length - 1];\n\n    if (isIndexFile(parsed)) {\n        return lastDirectory;\n    } else {\n        return replacePattern ? parsed.name.replace(replacePattern, '') : parsed.name;\n    }\n}\n\nfunction getTransformsFromOptions(option) {\n    var usedTransforms = (option && option.push) ? option : [ option ];\n\n    return usedTransforms.map(function (name) {\n        return transforms[name];\n    });\n}\n\nfunction transform(exportedName, transforms) {\n    return transforms.map(function (t) {\n        return t ? t(exportedName) : exportedName;\n    });\n}\n\nfunction anyMatch(expectedExport, transformedNames) {\n    return transformedNames.some(function (name) {\n        return name === expectedExport;\n    });\n}\n\nfunction getWhatToMatchMessage(transforms) {\n    if (transforms.length === 1 && !transforms[0]) {\n        return \"the exported name\";\n    }\n    if (transforms.length > 1) {\n        return \"any of the exported and transformed names\"\n    }\n    return \"the exported and transformed name\";\n}\n\nmodule.exports = function(context) {\n    return {\n        \"Program\": function (node) {\n            var transforms = getTransformsFromOptions(context.options[0]),\n                replacePattern = context.options[1] ? new RegExp(context.options[1]) : null,\n                filename = context.getFilename(),\n                absoluteFilename = path.resolve(filename),\n                parsed = parseFilename(absoluteFilename),\n                shouldIgnore = isIgnoredFilename(filename),\n                exportedName = getExportedName(node),\n                isExporting = Boolean(exportedName),\n                expectedExport = getStringToCheckAgainstExport(parsed, replacePattern),\n                transformedNames = transform(exportedName, transforms),\n                everythingIsIndex = exportedName === 'index' && parsed.name === 'index',\n                matchesExported = anyMatch(expectedExport, transformedNames) || everythingIsIndex,\n                reportIf = function (condition, messageForNormalFile, messageForIndexFile) {\n                    var message = (!messageForIndexFile || !isIndexFile(parsed)) ? messageForNormalFile : messageForIndexFile;\n\n                    if (condition) {\n                        context.report(node, message, {\n                            name: parsed.base,\n                            expectedExport: expectedExport,\n                            exportName: transformedNames.join(\"', '\"),\n                            extension: parsed.ext,\n                            whatToMatch: getWhatToMatchMessage(transforms)\n                        });\n                    }\n                };\n\n            if (shouldIgnore) return;\n\n            reportIf(\n                isExporting && !matchesExported,\n                \"Filename '{{expectedExport}}' must match {{whatToMatch}} '{{exportName}}'.\",\n                \"The directory '{{expectedExport}}' must be named '{{exportName}}', after the exported value of its index file.\"\n            );\n        }\n    }\n};\n\nmodule.exports.schema = [\n    {\n\n        oneOf: [\n            transformSchema,\n            { type: \"array\", items: transformSchema, minItems: 1 }\n        ]\n    },\n    {\n        type: \"string\"\n    }\n];\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/common/isIndexFile.js":"module.exports = function isIndexFile(parsed) {\n    return parsed.name === 'index';\n};\n","/home/travis/build/npmtest/node-npmtest-eslint-plugin-filenames/node_modules/eslint-plugin-filenames/lib/rules/no-index.js":"/**\n * @fileoverview Rule to ensure that there exist no index files\n * @author Stefan Lau\n */\n\n//------------------------------------------------------------------------------\n// Rule Definition\n//------------------------------------------------------------------------------\n\nvar path = require('path'),\n    parseFilename = require('../common/parseFilename'),\n    isIgnoredFilename = require('../common/isIgnoredFilename'),\n    isIndexFile = require('../common/isIndexFile');\n\nmodule.exports = function(context) {\n    return {\n        \"Program\": function(node) {\n            var filename = context.getFilename(),\n                absoluteFilename = path.resolve(filename),\n                parsed = parseFilename(absoluteFilename),\n                shouldIgnore = isIgnoredFilename(filename),\n                isIndex = isIndexFile(parsed);\n\n\n            if (shouldIgnore) return;\n            if (isIndex) {\n                context.report(node, \"'index.js' files are not allowed.\");\n            }\n        }\n    };\n\n};\n"}